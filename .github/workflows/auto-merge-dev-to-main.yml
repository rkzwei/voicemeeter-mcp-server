name: Auto-merge Dev to Main

on:
  push:
    branches: [ dev ]
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    branches: [ dev ]
    types:
      - completed

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Check if CI passed on dev
      id: check-ci
      run: |
        # Get the latest commit SHA on dev branch
        DEV_SHA=$(git rev-parse origin/dev)
        echo "dev_sha=$DEV_SHA" >> $GITHUB_OUTPUT
        
        # Check if this is a push event or workflow_run event
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "ci_passed=pending" >> $GITHUB_OUTPUT
        else
          echo "ci_passed=success" >> $GITHUB_OUTPUT
        fi
    
    - name: Wait for CI to complete (if push event)
      if: steps.check-ci.outputs.ci_passed == 'pending'
      run: |
        echo "Waiting for CI/CD pipeline to complete on dev branch..."
        sleep 30
        
        # Check CI status using GitHub CLI
        gh run list --branch dev --limit 1 --json status,conclusion,workflowName
        
        # Wait up to 10 minutes for CI to complete
        timeout=600
        elapsed=0
        while [ $elapsed -lt $timeout ]; do
          status=$(gh run list --branch dev --limit 1 --json status --jq '.[0].status')
          conclusion=$(gh run list --branch dev --limit 1 --json conclusion --jq '.[0].conclusion')
          
          if [ "$status" = "completed" ]; then
            if [ "$conclusion" = "success" ]; then
              echo "CI passed successfully!"
              break
            else
              echo "CI failed with conclusion: $conclusion"
              exit 1
            fi
          fi
          
          echo "CI still running... waiting 30 seconds"
          sleep 30
          elapsed=$((elapsed + 30))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "Timeout waiting for CI to complete"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Pull Request from dev to main
      id: create-pr
      run: |
        # Check if there are differences between dev and main
        git fetch origin main
        git fetch origin dev
        
        if git diff --quiet origin/main origin/dev; then
          echo "No differences between dev and main branches"
          echo "pr_created=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check if PR already exists
        existing_pr=$(gh pr list --base main --head dev --json number --jq '.[0].number' || echo "")
        
        if [ -n "$existing_pr" ] && [ "$existing_pr" != "null" ]; then
          echo "Pull request already exists: #$existing_pr"
          echo "pr_number=$existing_pr" >> $GITHUB_OUTPUT
          echo "pr_created=false" >> $GITHUB_OUTPUT
        else
          # Create new PR
          pr_number=$(gh pr create \
            --base main \
            --head dev \
            --title "Auto-merge: Dev to Main (CI Passed)" \
            --body "ü§ñ **Automated Pull Request**

This PR was automatically created after the CI/CD pipeline passed successfully on the \`dev\` branch.

## Changes
- All tests passed ‚úÖ
- Code quality checks passed ‚úÖ  
- Security scans passed ‚úÖ
- Build completed successfully ‚úÖ

## Auto-merge Policy
This PR will be automatically merged if:
- All required status checks pass
- No conflicts exist
- Branch protection rules are satisfied

---
*Generated by GitHub Actions*" \
            --json number --jq '.number')
          
          echo "Created pull request: #$pr_number"
          echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
          echo "pr_created=true" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Enable auto-merge on PR
      if: steps.create-pr.outputs.pr_number != ''
      run: |
        pr_number="${{ steps.create-pr.outputs.pr_number }}"
        
        # Enable auto-merge with squash strategy
        gh pr merge $pr_number --auto --squash
        
        echo "Auto-merge enabled for PR #$pr_number"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Add labels to PR
      if: steps.create-pr.outputs.pr_created == 'true'
      run: |
        pr_number="${{ steps.create-pr.outputs.pr_number }}"
        
        gh pr edit $pr_number --add-label "automated" --add-label "dev-to-main" --add-label "ci-passed"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Auto-merge from dev to main failed"
        echo "Please check the logs and resolve any issues manually"
        
        # Could add Slack/Discord notification here if needed
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"Auto-merge from dev to main failed"}' \
        #   $SLACK_WEBHOOK_URL
